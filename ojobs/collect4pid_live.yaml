# Author: Nuno Aguiar
help:
  text   : Retrieves Java hsperf data directly from a local pid to the local Prometheus database
  expects: 
  - name     : pid
    desc     : The PID of the Java process to retrieve the data from
    example  : "1234"
    mandatory: true
  - name     : prefix
    desc     : The prefix to use for the Prometheus metrics
    example  : myapp
    mandatory: false

init:
  # These parameters are similar to nattrmon.yaml
  nattrmonInit: &INIT
    __NAM_DEBUG              : false  # change to true for debugging
    __NAM_NEED_CH_PERSISTENCE: false
    __NAM_LOGCONSOLE         : true
    __NAM_NOPLUGFILES        : true
    #__NAM_BUFFERCHANNELS     : true
    #__NAM_BUFFERBYNUMBER     : 100
    #__NAM_BUFFERBYTIME       : 1000

nattrmon: &NATTRMON
- input:
    # name: Input from PID
    # cron: "*/1 * * * * *"
    # exec: |
    #   var _pdata = global.fn(ow.java.parseHSPerf($from(ow.java.getLocalJavaPIDs()).equals("pid", global.pid).at(0).path))
    #   var _ts = Math.round(new Date(_pdata.__ts).getTime() / 1000)
    #   delete _pdata.__ts
    #   var _data = ow.metrics.fromObj2OpenMetrics(_pdata, global.prefix, _ts)

    #   return { gc4pid: _data }
    name    : Input from pid
    cron    : "*/1 * * * * *"
    execFrom: nInput_CollectAllGC

- output: 
    # name       : Output to Prometheus
    # chSubscribe: nattrmon::cvals
    # exec       : |
    #   if (isDef(args.k) && args.k.name == "gc4pid") {
    #     var _f = io.createTempFile("data", ".openmetrics")
    #     io.writeFileString(_f, args.v.val)

    #     var _r = $sh("/usr/bin/openmetrics2prom.sh " + _f).get(0)
    #     if (_r.exitcode != 0) {
    #       cprintErr(_r)
    #     } else {
    #       printnl(".")
    #     }
    #     io.rm(_f)
    #   }
    name       : Output to Prometheus
    chSubscribe: nattrmon::cvals
    execFrom   : nOutput_PrometheusFiles

ojob:
  opacks      :
  - openaf: 20241117
  - nAttrMon
  catch       : printErrnl("[" + job.name + "] "); if (isDef(exception.javaException)) exception.javaException.printStackTrace(); else printErr(exception)
  logToConsole: false   # to change when finished
  daemon      : true        
  owraps      :
  - Metrics
  - Java

todo:
- name: nAttrMon Prepare shutdown
- name: Init functions
- name: nAttrMon Init
  args: *INIT
- name: nAttrMon Add Plugs
  args: *NATTRMON
- name: nAttrMon Start

include:
- oJob_nAttrMon.yaml

jobs:
# ---------------------
- name : Init functions
  exec : |
    global.pid = args.pid
    global.prefix = _$(args.prefix).isString().default("java")

    global.fn = function(data) {
      data.__ts = new Date()

      var r = { max: 0, total: 0, used: 0, free: 0 }
      data.sun.gc.generation.forEach(gen => {
        gen.space.forEach(space => {
          r.max   = (r.max < Number(space.maxCapacity)) ? Number(space.maxCapacity) : r.max
          r.used  = r.used + Number(space.used)
          r.total = isNumber(space.capacity) ? r.total + Number(space.capacity) : r.total
          data.sun.gc["__percUsed_" + space.name] = (100 * space.used) / space.capacity
        })
      })
      data.sun.gc.__percUsed_meta = (100 * data.sun.gc.metaspace.used) / data.sun.gc.metaspace.capacity
      data.sun.gc.__percUsed_ccs = (100 * data.sun.gc.compressedclassspace.used) / data.sun.gc.compressedclassspace.capacity

      // Java 8
      var _ygc = $from(data.sun.gc.collector).equals("name", "PSScavenge").at(0)
      data.sun.gc.__ygc = isDef(_ygc) ? Number(_ygc.invocations) : 0
      data.sun.gc.__ygct = isDef(_ygc) ? Number(_ygc.time / 1000000000) : 0
      
      var _fgc = $from(data.sun.gc.collector).equals("name", "PSParallelCompact").orEquals("name", "").at(0)
      data.sun.gc.__fgc = isDef(_fgc) ? Number(_fgc.invocations) : 0
      data.sun.gc.__fgct = isDef(_fgc) ? Number(_fgc.time / 1000000000) : 0

      data.sun.gc.__gct = $from(data.sun.gc.collector).sum("time") / 1000000000

      data.java.__mem = {
        total    : r.total,
        used     : r.used,
        free     : r.total - r.used,
        metaMax  : data.sun.gc.metaspace.maxCapacity,
        metaTotal: data.sun.gc.metaspace.capacity,
        metaUsed : data.sun.gc.metaspace.used,
        metaFree : data.sun.gc.metaspace.capacity - data.sun.gc.metaspace.used
      }

      return data
    }    
