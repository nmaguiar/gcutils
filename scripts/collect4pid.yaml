# Author: Nuno Aguiar
help:
  text   : Does stuff. 
  expects: 
  - name     : something
    desc     : To do something
    example  : aValueExample
    mandatory: false

todo:
- Init
- Get data

ojob:
  opacks      :
  - openaf: 20231222
  catch       : printErrnl("[" + job.name + "] "); if (isDef(exception.javaException)) exception.javaException.printStackTrace(); else printErr(exception)
  logToConsole: true   # to change when finished
  daemon      : true        
  owraps      :
  - Metrics
  - Java

jobs:
# -----------
- name : Init
  exec : |
    global.fn = function(data) {
      data.__ts = new Date()

      var r = { max: 0, total: 0, used: 0, free: 0 }
      data.sun.gc.generation.forEach(gen => {
        gen.space.forEach(space => {
          r.max   = (r.max < Number(space.maxCapacity)) ? Number(space.maxCapacity) : r.max
          r.used  = r.used + Number(space.used)
          r.total = isNumber(space.capacity) ? r.total + Number(space.capacity) : r.total
          data.sun.gc["__percUsed_" + space.name] = (100 * space.used) / space.capacity
        })
      })
      data.sun.gc.__percUsed_meta = (100 * data.sun.gc.metaspace.used) / data.sun.gc.metaspace.capacity
      data.sun.gc.__percUsed_ccs = (100 * data.sun.gc.compressedclassspace.used) / data.sun.gc.compressedclassspace.capacity

      // Java 8
      var _ygc = $from(data.sun.gc.collector).equals("name", "PSScavenge").at(0)
      data.sun.gc.__ygc = isDef(_ygc) ? Number(_ygc.invocations) : 0
      data.sun.gc.__ygct = isDef(_ygc) ? Number(_ygc.time / 1000000000) : 0
      
      var _fgc = $from(data.sun.gc.collector).equals("name", "PSParallelCompact").orEquals("name", "").at(0)
      data.sun.gc.__fgc = isDef(_fgc) ? Number(_fgc.invocations) : 0
      data.sun.gc.__fgct = isDef(_fgc) ? Number(_fgc.time / 1000000000) : 0

      data.sun.gc.__gct = $from(data.sun.gc.collector).sum("time") / 1000000000

      data.java.__mem = {
        total    : r.total,
        used     : r.used,
        free     : r.total - r.used,
        metaMax  : data.sun.gc.metaspace.maxCapacity,
        metaTotal: data.sun.gc.metaspace.capacity,
        metaUsed : data.sun.gc.metaspace.used,
        metaFree : data.sun.gc.metaspace.capacity - data.sun.gc.metaspace.used
      }

      return data
    }    

# ---------------
- name : Get data
  deps : Init
  type : periodic
  typeArgs:
    timeInterval: 1000
  check:
    in:
      pid: toNumber.isNumber
  exec : |
    var _pdata = global.fn(ow.java.parseHSPerf($from(ow.java.getLocalJavaPIDs()).equals("pid", args.pid).at(0).path))
    var _ts = Math.round(new Date(_pdata.__ts).getTime() / 1000)
    delete _pdata.__ts
    var _data = ow.metrics.fromObj2OpenMetrics(_pdata, "test", _ts)

    var _f = io.createTempFile("data", ".openmetrics")
    io.writeFileString(_f, _data)

    var _r = $sh("openmetrics2prom.sh " + _f).get(0)
    if (_r.exitcode != 0) cprintErr(_r)