- Target: nmaguiar/gcutils:build (alpine 3.23.0_alpha20250612)
  Class: os-pkgs
  Type: alpine
- Target: Java
  Class: lang-pkgs
  Type: jar
- Target: Node.js
  Class: lang-pkgs
  Type: node-pkg
- Target: Python
  Class: lang-pkgs
  Type: python-pkg
- Target: usr/bin/prometheus
  Class: lang-pkgs
  Type: gobinary
  Vulnerabilities:
  - VulnerabilityID: GHSA-fv92-fjc5-jj9h
    PkgID: github.com/go-viper/mapstructure/v2@v2.2.1
    PkgName: github.com/go-viper/mapstructure/v2
    PkgIdentifier:
      PURL: pkg:golang/github.com/go-viper/mapstructure/v2@v2.2.1
      UID: e2c1d5fc4a675546
    InstalledVersion: v2.2.1
    FixedVersion: 2.3.0
    Status: fixed
    Layer:
      Digest: sha256:641eb5e82ad8676eec0aa33ee618ca745df872b354ae49004bf8f118d145dcee
      DiffID: sha256:0b0f59fc74b2c5e82c5d16a0a2d1c6d8937a52ccf58dc4f3b288accffe4a8dd3
    SeveritySource: ghsa
    PrimaryURL: https://github.com/advisories/GHSA-fv92-fjc5-jj9h
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: mapstructure May Leak Sensitive Information in Logs When Processing Malformed Data
    Description: "### Summary\n\nUse of this library in a security-critical context may result in leaking sensitive information, if used to process sensitive fields.\n\n### Details\n\nOpenBao (and presumably HashiCorp Vault) have surfaced error messages from `mapstructure` as follows:\n\nhttps://github.com/openbao/openbao/blob/98c3a59c040efca724353ca46ca79bd5cdbab920/sdk/framework/field_data.go#L43-L50\n\n```go\n\t\t\t_, _, err := d.getPrimitive(field, schema)\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"error converting input for field %q: %w\", field, err)\n\t\t\t}\n```\n\nwhere this calls `mapstructure.WeakDecode(...)`: https://github.com/openbao/openbao/blob/98c3a59c040efca724353ca46ca79bd5cdbab920/sdk/framework/field_data.go#L181-L193\n\n```go\n\nfunc (d *FieldData) getPrimitive(k string, schema *FieldSchema) (interface{}, bool, error) {\n\traw, ok := d.Raw[k]\n\tif !ok {\n\t\treturn nil, false, nil\n\t}\n\n\tswitch t := schema.Type; t {\n\tcase TypeBool:\n\t\tvar result bool\n\t\tif err := mapstructure.WeakDecode(raw, &result); err != nil {\n\t\t\treturn nil, false, err\n\t\t}\n\t\treturn result, true, nil\n```\n\nNotably, `WeakDecode(...)` eventually calls one of the decode helpers, which surfaces the original value:\n\nhttps://github.com/go-viper/mapstructure/blob/1a66224d5e54d8757f63bd66339cf764c3292c21/mapstructure.go#L679-L686\n\nhttps://github.com/go-viper/mapstructure/blob/1a66224d5e54d8757f63bd66339cf764c3292c21/mapstructure.go#L726-L730\n\nhttps://github.com/go-viper/mapstructure/blob/1a66224d5e54d8757f63bd66339cf764c3292c21/mapstructure.go#L783-L787\n\n& more.\n\n### PoC\n\nTo reproduce with OpenBao:\n\n```\n$ podman run -p 8300:8300 openbao/openbao:latest server -dev -dev-root-token-id=root -dev-listen-address=0.0.0.0:8300\n```\n\nand in a new tab:\n\n```\n$ BAO_TOKEN=root BAO_ADDR=http://localhost:8300 bao auth enable userpass\nSuccess! Enabled userpass auth method at: userpass/\n$ curl -X PUT -H \"X-Vault-Request: true\" -H \"X-Vault-Token: root\" -d '{\"password\":{\"asdf\":\"my-sensitive-value\"}}' \"http://localhost:8300/v1/auth/userpass/users/adsf\"\n{\"errors\":[\"error converting input for field \\\"password\\\": '' expected type 'string', got unconvertible type 'map[string]interface {}', value: 'map[asdf:my-sensitive-value]'\"]}\n```\n\n### Impact\n\nThis is an information disclosure bug with little mitigation. See https://discuss.hashicorp.com/t/hcsec-2025-09-vault-may-expose-sensitive-information-in-error-logs-when-processing-malformed-data-with-the-kv-v2-plugin/74717 for a previous version. That version was fixed, but this is in the second part of that error message (starting at `'' expected a map, got 'string'` -- when the field type is `string` and a `map` is provided, we see the above information leak -- the previous example had a `map` type field with a `string` value provided).\n\nThis was rated 4.5 Medium by HashiCorp in the past iteration."
    Severity: MEDIUM
    VendorSeverity:
      ghsa: 2
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N
        V3Score: 5.3
    References:
    - https://github.com/go-viper/mapstructure
    - https://github.com/go-viper/mapstructure/security/advisories/GHSA-fv92-fjc5-jj9h
    PublishedDate: '2025-06-27T16:24:59Z'
    LastModifiedDate: '2025-06-27T16:24:59Z'
- Target: usr/bin/promtool
  Class: lang-pkgs
  Type: gobinary
  Vulnerabilities:
  - VulnerabilityID: GHSA-fv92-fjc5-jj9h
    PkgID: github.com/go-viper/mapstructure/v2@v2.2.1
    PkgName: github.com/go-viper/mapstructure/v2
    PkgIdentifier:
      PURL: pkg:golang/github.com/go-viper/mapstructure/v2@v2.2.1
      UID: 83ec1cc3df41ba2
    InstalledVersion: v2.2.1
    FixedVersion: 2.3.0
    Status: fixed
    Layer:
      Digest: sha256:641eb5e82ad8676eec0aa33ee618ca745df872b354ae49004bf8f118d145dcee
      DiffID: sha256:0b0f59fc74b2c5e82c5d16a0a2d1c6d8937a52ccf58dc4f3b288accffe4a8dd3
    SeveritySource: ghsa
    PrimaryURL: https://github.com/advisories/GHSA-fv92-fjc5-jj9h
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: mapstructure May Leak Sensitive Information in Logs When Processing Malformed Data
    Description: "### Summary\n\nUse of this library in a security-critical context may result in leaking sensitive information, if used to process sensitive fields.\n\n### Details\n\nOpenBao (and presumably HashiCorp Vault) have surfaced error messages from `mapstructure` as follows:\n\nhttps://github.com/openbao/openbao/blob/98c3a59c040efca724353ca46ca79bd5cdbab920/sdk/framework/field_data.go#L43-L50\n\n```go\n\t\t\t_, _, err := d.getPrimitive(field, schema)\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"error converting input for field %q: %w\", field, err)\n\t\t\t}\n```\n\nwhere this calls `mapstructure.WeakDecode(...)`: https://github.com/openbao/openbao/blob/98c3a59c040efca724353ca46ca79bd5cdbab920/sdk/framework/field_data.go#L181-L193\n\n```go\n\nfunc (d *FieldData) getPrimitive(k string, schema *FieldSchema) (interface{}, bool, error) {\n\traw, ok := d.Raw[k]\n\tif !ok {\n\t\treturn nil, false, nil\n\t}\n\n\tswitch t := schema.Type; t {\n\tcase TypeBool:\n\t\tvar result bool\n\t\tif err := mapstructure.WeakDecode(raw, &result); err != nil {\n\t\t\treturn nil, false, err\n\t\t}\n\t\treturn result, true, nil\n```\n\nNotably, `WeakDecode(...)` eventually calls one of the decode helpers, which surfaces the original value:\n\nhttps://github.com/go-viper/mapstructure/blob/1a66224d5e54d8757f63bd66339cf764c3292c21/mapstructure.go#L679-L686\n\nhttps://github.com/go-viper/mapstructure/blob/1a66224d5e54d8757f63bd66339cf764c3292c21/mapstructure.go#L726-L730\n\nhttps://github.com/go-viper/mapstructure/blob/1a66224d5e54d8757f63bd66339cf764c3292c21/mapstructure.go#L783-L787\n\n& more.\n\n### PoC\n\nTo reproduce with OpenBao:\n\n```\n$ podman run -p 8300:8300 openbao/openbao:latest server -dev -dev-root-token-id=root -dev-listen-address=0.0.0.0:8300\n```\n\nand in a new tab:\n\n```\n$ BAO_TOKEN=root BAO_ADDR=http://localhost:8300 bao auth enable userpass\nSuccess! Enabled userpass auth method at: userpass/\n$ curl -X PUT -H \"X-Vault-Request: true\" -H \"X-Vault-Token: root\" -d '{\"password\":{\"asdf\":\"my-sensitive-value\"}}' \"http://localhost:8300/v1/auth/userpass/users/adsf\"\n{\"errors\":[\"error converting input for field \\\"password\\\": '' expected type 'string', got unconvertible type 'map[string]interface {}', value: 'map[asdf:my-sensitive-value]'\"]}\n```\n\n### Impact\n\nThis is an information disclosure bug with little mitigation. See https://discuss.hashicorp.com/t/hcsec-2025-09-vault-may-expose-sensitive-information-in-error-logs-when-processing-malformed-data-with-the-kv-v2-plugin/74717 for a previous version. That version was fixed, but this is in the second part of that error message (starting at `'' expected a map, got 'string'` -- when the field type is `string` and a `map` is provided, we see the above information leak -- the previous example had a `map` type field with a `string` value provided).\n\nThis was rated 4.5 Medium by HashiCorp in the past iteration."
    Severity: MEDIUM
    VendorSeverity:
      ghsa: 2
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N
        V3Score: 5.3
    References:
    - https://github.com/go-viper/mapstructure
    - https://github.com/go-viper/mapstructure/security/advisories/GHSA-fv92-fjc5-jj9h
    PublishedDate: '2025-06-27T16:24:59Z'
    LastModifiedDate: '2025-06-27T16:24:59Z'
- Target: usr/share/grafana/bin/grafana
  Class: lang-pkgs
  Type: gobinary
  Vulnerabilities:
  - VulnerabilityID: GHSA-2x5j-vhc8-9cwm
    PkgID: github.com/cloudflare/circl@v1.6.0
    PkgName: github.com/cloudflare/circl
    PkgIdentifier:
      PURL: pkg:golang/github.com/cloudflare/circl@v1.6.0
      UID: ad3bafe31fc946d5
    InstalledVersion: v1.6.0
    FixedVersion: 1.6.1
    Status: fixed
    Layer:
      Digest: sha256:641eb5e82ad8676eec0aa33ee618ca745df872b354ae49004bf8f118d145dcee
      DiffID: sha256:0b0f59fc74b2c5e82c5d16a0a2d1c6d8937a52ccf58dc4f3b288accffe4a8dd3
    SeveritySource: ghsa
    PrimaryURL: https://github.com/advisories/GHSA-2x5j-vhc8-9cwm
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'CIRCL-Fourq: Missing and wrong validation can lead to incorrect results'
    Description: |-
      ### Impact
      The CIRCL implementation of FourQ fails to validate user-supplied low-order points during Diffie-Hellman key exchange, potentially allowing attackers to force the identity point and compromise session security.

      Moreover, there is an incorrect point validation in ScalarMult can lead to incorrect results in the isEqual function and if a point is on the curve.


      ### Patches
      Version 1.6.1 (https://github.com/cloudflare/circl/tree/v1.6.1) mitigates the identified issues.

      We acknowledge Alon Livne (Botanica Software Labs) for the reported findings.
    Severity: LOW
    VendorSeverity:
      ghsa: 1
    References:
    - https://github.com/cloudflare/circl
    - https://github.com/cloudflare/circl/security/advisories/GHSA-2x5j-vhc8-9cwm
    - https://github.com/cloudflare/circl/tree/v1.6.1
    PublishedDate: '2025-06-10T21:18:33Z'
    LastModifiedDate: '2025-06-10T21:18:33Z'
  - VulnerabilityID: GHSA-fv92-fjc5-jj9h
    PkgID: github.com/go-viper/mapstructure/v2@v2.2.1
    PkgName: github.com/go-viper/mapstructure/v2
    PkgIdentifier:
      PURL: pkg:golang/github.com/go-viper/mapstructure/v2@v2.2.1
      UID: 31212e5e6437563
    InstalledVersion: v2.2.1
    FixedVersion: 2.3.0
    Status: fixed
    Layer:
      Digest: sha256:641eb5e82ad8676eec0aa33ee618ca745df872b354ae49004bf8f118d145dcee
      DiffID: sha256:0b0f59fc74b2c5e82c5d16a0a2d1c6d8937a52ccf58dc4f3b288accffe4a8dd3
    SeveritySource: ghsa
    PrimaryURL: https://github.com/advisories/GHSA-fv92-fjc5-jj9h
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: mapstructure May Leak Sensitive Information in Logs When Processing Malformed Data
    Description: "### Summary\n\nUse of this library in a security-critical context may result in leaking sensitive information, if used to process sensitive fields.\n\n### Details\n\nOpenBao (and presumably HashiCorp Vault) have surfaced error messages from `mapstructure` as follows:\n\nhttps://github.com/openbao/openbao/blob/98c3a59c040efca724353ca46ca79bd5cdbab920/sdk/framework/field_data.go#L43-L50\n\n```go\n\t\t\t_, _, err := d.getPrimitive(field, schema)\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"error converting input for field %q: %w\", field, err)\n\t\t\t}\n```\n\nwhere this calls `mapstructure.WeakDecode(...)`: https://github.com/openbao/openbao/blob/98c3a59c040efca724353ca46ca79bd5cdbab920/sdk/framework/field_data.go#L181-L193\n\n```go\n\nfunc (d *FieldData) getPrimitive(k string, schema *FieldSchema) (interface{}, bool, error) {\n\traw, ok := d.Raw[k]\n\tif !ok {\n\t\treturn nil, false, nil\n\t}\n\n\tswitch t := schema.Type; t {\n\tcase TypeBool:\n\t\tvar result bool\n\t\tif err := mapstructure.WeakDecode(raw, &result); err != nil {\n\t\t\treturn nil, false, err\n\t\t}\n\t\treturn result, true, nil\n```\n\nNotably, `WeakDecode(...)` eventually calls one of the decode helpers, which surfaces the original value:\n\nhttps://github.com/go-viper/mapstructure/blob/1a66224d5e54d8757f63bd66339cf764c3292c21/mapstructure.go#L679-L686\n\nhttps://github.com/go-viper/mapstructure/blob/1a66224d5e54d8757f63bd66339cf764c3292c21/mapstructure.go#L726-L730\n\nhttps://github.com/go-viper/mapstructure/blob/1a66224d5e54d8757f63bd66339cf764c3292c21/mapstructure.go#L783-L787\n\n& more.\n\n### PoC\n\nTo reproduce with OpenBao:\n\n```\n$ podman run -p 8300:8300 openbao/openbao:latest server -dev -dev-root-token-id=root -dev-listen-address=0.0.0.0:8300\n```\n\nand in a new tab:\n\n```\n$ BAO_TOKEN=root BAO_ADDR=http://localhost:8300 bao auth enable userpass\nSuccess! Enabled userpass auth method at: userpass/\n$ curl -X PUT -H \"X-Vault-Request: true\" -H \"X-Vault-Token: root\" -d '{\"password\":{\"asdf\":\"my-sensitive-value\"}}' \"http://localhost:8300/v1/auth/userpass/users/adsf\"\n{\"errors\":[\"error converting input for field \\\"password\\\": '' expected type 'string', got unconvertible type 'map[string]interface {}', value: 'map[asdf:my-sensitive-value]'\"]}\n```\n\n### Impact\n\nThis is an information disclosure bug with little mitigation. See https://discuss.hashicorp.com/t/hcsec-2025-09-vault-may-expose-sensitive-information-in-error-logs-when-processing-malformed-data-with-the-kv-v2-plugin/74717 for a previous version. That version was fixed, but this is in the second part of that error message (starting at `'' expected a map, got 'string'` -- when the field type is `string` and a `map` is provided, we see the above information leak -- the previous example had a `map` type field with a `string` value provided).\n\nThis was rated 4.5 Medium by HashiCorp in the past iteration."
    Severity: MEDIUM
    VendorSeverity:
      ghsa: 2
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N
        V3Score: 5.3
    References:
    - https://github.com/go-viper/mapstructure
    - https://github.com/go-viper/mapstructure/security/advisories/GHSA-fv92-fjc5-jj9h
    PublishedDate: '2025-06-27T16:24:59Z'
    LastModifiedDate: '2025-06-27T16:24:59Z'
- Target: usr/share/grafana/bin/grafana-cli
  Class: lang-pkgs
  Type: gobinary
- Target: usr/share/grafana/bin/grafana-server
  Class: lang-pkgs
  Type: gobinary
