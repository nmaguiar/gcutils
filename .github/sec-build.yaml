- Target: nmaguiar/gcutils:build (alpine 3.22.0_alpha20250108)
  Class: os-pkgs
  Type: alpine
- Target: Java
  Class: lang-pkgs
  Type: jar
- Target: Node.js
  Class: lang-pkgs
  Type: node-pkg
- Target: Python
  Class: lang-pkgs
  Type: python-pkg
- Target: usr/bin/grafana
  Class: lang-pkgs
  Type: gobinary
  Vulnerabilities:
  - VulnerabilityID: CVE-2025-30153
    PkgID: github.com/getkin/kin-openapi@v0.126.0
    PkgName: github.com/getkin/kin-openapi
    PkgIdentifier:
      PURL: pkg:golang/github.com/getkin/kin-openapi@v0.126.0
      UID: a83660a330d9bcf6
    InstalledVersion: v0.126.0
    FixedVersion: 0.131.0
    Status: fixed
    Layer:
      Digest: sha256:6d7e5136292d18c2ebd9139778b1b680694970552bf295006f0f049d6d4213a3
      DiffID: sha256:4c6c66d7094f65750c83c5f0eb81b35370ec963fbf2800ffe0b6078c8bba8099
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-30153
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'github.com/getkin/kin-openapi/openapi3filter: Improper Handling of Highly Compressed Data (Data Amplification) in github.com/getkin/kin-openapi/openapi3filter'
    Description: kin-openapi is a Go project for handling OpenAPI files. Prior to 0.131.0, when validating a request with a multipart/form-data schema, if the OpenAPI schema allows it, an attacker can upload a crafted ZIP file (e.g., a ZIP bomb), causing the server to consume all available system memory. The root cause comes from the ZipFileBodyDecoder, which is registered automatically by the module (contrary to what the documentation says). This vulnerability is fixed in 0.131.0.
    Severity: HIGH
    CweIDs:
    - CWE-409
    VendorSeverity:
      ghsa: 3
      redhat: 3
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H
        V3Score: 7.5
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H
        V3Score: 7.5
    References:
    - https://access.redhat.com/security/cve/CVE-2025-30153
    - https://github.com/getkin/kin-openapi
    - https://github.com/getkin/kin-openapi/blob/6da871e0e170b7637eb568c265c08bc2b5d6e7a3/openapi3filter/req_resp_decoder.go#L1275
    - https://github.com/getkin/kin-openapi/blob/6da871e0e170b7637eb568c265c08bc2b5d6e7a3/openapi3filter/req_resp_decoder.go#L1523
    - https://github.com/getkin/kin-openapi/commit/67f0b233ffc01332f7d993f79490fbea5f4455f1
    - https://github.com/getkin/kin-openapi/pull/1059
    - https://github.com/getkin/kin-openapi/security/advisories/GHSA-wq9g-9vfc-cfq9
    - https://github.com/getkin/kin-openapi?tab=readme-ov-file#custom-content-type-for-body-of-http-requestresponse
    - https://nvd.nist.gov/vuln/detail/CVE-2025-30153
    - https://www.cve.org/CVERecord?id=CVE-2025-30153
    PublishedDate: '2025-03-19T16:15:33.607Z'
    LastModifiedDate: '2025-03-19T16:15:33.607Z'
  - VulnerabilityID: CVE-2025-46331
    PkgID: github.com/openfga/openfga@v1.8.6
    PkgName: github.com/openfga/openfga
    PkgIdentifier:
      PURL: pkg:golang/github.com/openfga/openfga@v1.8.6
      UID: 5b5fa0b1c66307f6
    InstalledVersion: v1.8.6
    FixedVersion: 1.8.11
    Status: fixed
    Layer:
      Digest: sha256:6d7e5136292d18c2ebd9139778b1b680694970552bf295006f0f049d6d4213a3
      DiffID: sha256:4c6c66d7094f65750c83c5f0eb81b35370ec963fbf2800ffe0b6078c8bba8099
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-46331
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: OpenFGA Authorization Bypass
    Description: OpenFGA is a high-performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar. OpenFGA v1.8.10 to v1.3.6 (Helm chart <= openfga-0.2.28, docker <= v.1.8.10) are vulnerable to authorization bypass when certain Check and ListObject calls are executed. This issue has been patched in version 1.8.11.
    Severity: MEDIUM
    CweIDs:
    - CWE-284
    VendorSeverity:
      ghsa: 2
    References:
    - https://github.com/openfga/openfga
    - https://github.com/openfga/openfga/commit/244302e7a8b979d66cc1874a3899cdff7d47862f
    - https://github.com/openfga/openfga/security/advisories/GHSA-w222-m46c-mgh6
    - https://nvd.nist.gov/vuln/detail/CVE-2025-46331
    PublishedDate: '2025-04-30T19:15:55.49Z'
    LastModifiedDate: '2025-05-02T13:53:40.163Z'
  - VulnerabilityID: CVE-2025-48371
    PkgID: github.com/openfga/openfga@v1.8.6
    PkgName: github.com/openfga/openfga
    PkgIdentifier:
      PURL: pkg:golang/github.com/openfga/openfga@v1.8.6
      UID: 5b5fa0b1c66307f6
    InstalledVersion: v1.8.6
    FixedVersion: 1.8.13
    Status: fixed
    Layer:
      Digest: sha256:6d7e5136292d18c2ebd9139778b1b680694970552bf295006f0f049d6d4213a3
      DiffID: sha256:4c6c66d7094f65750c83c5f0eb81b35370ec963fbf2800ffe0b6078c8bba8099
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-48371
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: OpenFGA Authorization Bypass
    Description: 'OpenFGA is an authorization/permission engine. OpenFGA versions 1.8.0 through 1.8.12 (corresponding to Helm chart openfga-0.2.16 through openfga-0.2.30 and docker 1.8.0 through 1.8.12) are vulnerable to authorization bypass when certain Check and ListObject calls are executed. Users are affected under four specific conditions: First, calling Check API or ListObjects with an authorization model that has a relationship directly assignable by both type bound public access and userset; second, there are check or list object queries with contextual tuples for the relationship that can be directly assignable by both type bound public access and userset; third, those contextual tuplesâ€™s user field is an userset; and finally, type bound public access tuples are not assigned to the relationship. Users should upgrade to version 1.8.13 to receive a patch. The upgrade is backwards compatible.'
    Severity: MEDIUM
    CweIDs:
    - CWE-285
    VendorSeverity:
      ghsa: 2
    References:
    - https://github.com/openfga/openfga
    - https://github.com/openfga/openfga/commit/e5960d4eba92b723de8ff3a5346a07f50c1379ca
    - https://github.com/openfga/openfga/security/advisories/GHSA-c72g-53hw-82q7
    - https://nvd.nist.gov/vuln/detail/CVE-2025-48371
    - https://pkg.go.dev/vuln/GO-2025-3707
    PublishedDate: '2025-05-22T23:15:19.23Z'
    LastModifiedDate: '2025-05-23T15:54:42.643Z'
- Target: usr/bin/prometheus
  Class: lang-pkgs
  Type: gobinary
  Vulnerabilities:
  - VulnerabilityID: CVE-2024-35255
    PkgID: github.com/Azure/azure-sdk-for-go/sdk/azidentity@v1.5.2
    PkgName: github.com/Azure/azure-sdk-for-go/sdk/azidentity
    PkgIdentifier:
      PURL: pkg:golang/github.com/azure/azure-sdk-for-go/sdk/azidentity@v1.5.2
      UID: 36ed01495109b474
    InstalledVersion: v1.5.2
    FixedVersion: 1.6.0
    Status: fixed
    Layer:
      Digest: sha256:6d7e5136292d18c2ebd9139778b1b680694970552bf295006f0f049d6d4213a3
      DiffID: sha256:4c6c66d7094f65750c83c5f0eb81b35370ec963fbf2800ffe0b6078c8bba8099
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2024-35255
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'azure-identity: Azure Identity Libraries Elevation of Privilege Vulnerability in github.com/Azure/azure-sdk-for-go/sdk/azidentity'
    Description: Azure Identity Libraries and Microsoft Authentication Library Elevation of Privilege Vulnerability
    Severity: MEDIUM
    CweIDs:
    - CWE-362
    VendorSeverity:
      amazon: 3
      azure: 2
      cbl-mariner: 2
      ghsa: 2
      redhat: 2
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N
        V3Score: 5.5
      redhat:
        V3Vector: CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N
        V3Score: 5.5
    References:
    - https://access.redhat.com/security/cve/CVE-2024-35255
    - https://github.com/Azure/azure-sdk-for-go/commit/50774cd9709905523136fb05e8c85a50e8984499
    - https://github.com/Azure/azure-sdk-for-java/commit/5bf020d6ea056de40e2738e3647a4e06f902c18d
    - https://github.com/Azure/azure-sdk-for-js/commit/c6aa75d312ae463e744163cedfd8fc480cc8d492
    - https://github.com/Azure/azure-sdk-for-net/commit/9279a4f38bf69b457cfb9b354f210e0a540a5c53
    - https://github.com/Azure/azure-sdk-for-python/commit/cb065acd7d0f957327dc4f02d1646d4e51a94178
    - https://github.com/AzureAD/microsoft-authentication-library-for-dotnet/issues/4806#issuecomment-2178960340
    - https://github.com/advisories/GHSA-m5vv-6r4h-3vj9
    - https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-35255
    - https://nvd.nist.gov/vuln/detail/CVE-2024-35255
    - https://www.cve.org/CVERecord?id=CVE-2024-35255
    PublishedDate: '2024-06-11T17:16:03.55Z'
    LastModifiedDate: '2024-11-21T09:20:01.923Z'
  - VulnerabilityID: CVE-2024-41110
    PkgID: github.com/docker/docker@v26.1.3+incompatible
    PkgName: github.com/docker/docker
    PkgIdentifier:
      PURL: pkg:golang/github.com/docker/docker@v26.1.3%2Bincompatible
      UID: ccb2af30cfe7e8ea
    InstalledVersion: v26.1.3+incompatible
    FixedVersion: 23.0.15, 26.1.5, 27.1.1, 25.0.6
    Status: fixed
    Layer:
      Digest: sha256:6d7e5136292d18c2ebd9139778b1b680694970552bf295006f0f049d6d4213a3
      DiffID: sha256:4c6c66d7094f65750c83c5f0eb81b35370ec963fbf2800ffe0b6078c8bba8099
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2024-41110
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'moby: Authz zero length regression'
    Description: |-
      Moby is an open-source project created by Docker for software containerization. A security vulnerability has been detected in certain versions of Docker Engine, which could allow an attacker to bypass authorization plugins (AuthZ) under specific circumstances. The base likelihood of this being exploited is low.

      Using a specially-crafted API request, an Engine API client could make the daemon forward the request or response to an authorization plugin without the body. In certain circumstances, the authorization plugin may allow a request which it would have otherwise denied if the body had been forwarded to it.

      A security issue was discovered In 2018, where an attacker could bypass AuthZ plugins using a specially crafted API request. This could lead to unauthorized actions, including privilege escalation. Although this issue was fixed in Docker Engine v18.09.1 in January 2019, the fix was not carried forward to later major versions, resulting in a regression. Anyone who depends on authorization plugins that introspect the request and/or response body to make access control decisions is potentially impacted.

      Docker EE v19.03.x and all versions of Mirantis Container Runtime are not vulnerable.

      docker-ce v27.1.1 containes patches to fix the vulnerability. Patches have also been merged into the master, 19.03, 20.0, 23.0, 24.0, 25.0, 26.0, and 26.1 release branches. If one is unable to upgrade immediately, avoid using AuthZ plugins and/or restrict access to the Docker API to trusted parties, following the principle of least privilege.
    Severity: CRITICAL
    CweIDs:
    - CWE-187
    - CWE-444
    - CWE-863
    VendorSeverity:
      amazon: 3
      azure: 4
      cbl-mariner: 4
      ghsa: 4
      redhat: 4
      ubuntu: 3
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H
        V3Score: 10
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H
        V3Score: 9.9
    References:
    - https://access.redhat.com/security/cve/CVE-2024-41110
    - https://github.com/moby/moby
    - https://github.com/moby/moby/commit/411e817ddf710ff8e08fa193da80cb78af708191
    - https://github.com/moby/moby/commit/42f40b1d6dd7562342f832b9cd2adf9e668eeb76
    - https://github.com/moby/moby/commit/65cc597cea28cdc25bea3b8a86384b4251872919
    - https://github.com/moby/moby/commit/852759a7df454cbf88db4e954c919becd48faa9b
    - https://github.com/moby/moby/commit/a31260625655cff9ae226b51757915e275e304b0
    - https://github.com/moby/moby/commit/a79fabbfe84117696a19671f4aa88b82d0f64fc1
    - https://github.com/moby/moby/commit/ae160b4edddb72ef4bd71f66b975a1a1cc434f00
    - https://github.com/moby/moby/commit/ae2b3666c517c96cbc2adf1af5591a6b00d4ec0f
    - https://github.com/moby/moby/commit/cc13f952511154a2866bddbb7dddebfe9e83b801
    - https://github.com/moby/moby/commit/fc274cd2ff4cf3b48c91697fb327dd1fb95588fb
    - https://github.com/moby/moby/security/advisories/GHSA-v23v-6jw2-98fq
    - https://lists.debian.org/debian-lts-announce/2024/10/msg00009.html
    - https://nvd.nist.gov/vuln/detail/CVE-2024-41110
    - https://security.netapp.com/advisory/ntap-20240802-0001/
    - https://ubuntu.com/security/notices/USN-7161-1
    - https://ubuntu.com/security/notices/USN-7161-2
    - https://ubuntu.com/security/notices/USN-7161-3
    - https://www.cve.org/CVERecord?id=CVE-2024-41110
    - https://www.docker.com/blog/docker-security-advisory-docker-engine-authz-plugin
    - https://www.docker.com/blog/docker-security-advisory-docker-engine-authz-plugin/
    PublishedDate: '2024-07-24T17:15:11.053Z'
    LastModifiedDate: '2024-11-21T09:32:15.16Z'
  - VulnerabilityID: CVE-2025-30204
    PkgID: github.com/golang-jwt/jwt/v5@v5.2.1
    PkgName: github.com/golang-jwt/jwt/v5
    PkgIdentifier:
      PURL: pkg:golang/github.com/golang-jwt/jwt/v5@v5.2.1
      UID: 43201a615e164c9a
    InstalledVersion: v5.2.1
    FixedVersion: 5.2.2
    Status: fixed
    Layer:
      Digest: sha256:6d7e5136292d18c2ebd9139778b1b680694970552bf295006f0f049d6d4213a3
      DiffID: sha256:4c6c66d7094f65750c83c5f0eb81b35370ec963fbf2800ffe0b6078c8bba8099
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-30204
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'golang-jwt/jwt: jwt-go allows excessive memory allocation during header parsing'
    Description: golang-jwt is a Go implementation of JSON Web Tokens. Starting in version 3.2.0 and prior to versions 5.2.2 and 4.5.2, the function parse.ParseUnverified splits (via a call to strings.Split) its argument (which is untrusted data) on periods. As a result, in the face of a malicious request whose Authorization header consists of Bearer  followed by many period characters, a call to that function incurs allocations to the tune of O(n) bytes (where n stands for the length of the function's argument), with a constant factor of about 16. This issue is fixed in 5.2.2 and 4.5.2.
    Severity: HIGH
    CweIDs:
    - CWE-405
    VendorSeverity:
      alma: 3
      amazon: 3
      azure: 3
      cbl-mariner: 3
      ghsa: 3
      oracle-oval: 3
      redhat: 3
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H
        V3Score: 7.5
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H
        V3Score: 7.5
    References:
    - https://access.redhat.com/errata/RHSA-2025:7425
    - https://access.redhat.com/security/cve/CVE-2025-30204
    - https://bugzilla.redhat.com/2354195
    - https://errata.almalinux.org/9/ALSA-2025-7425.html
    - https://github.com/golang-jwt/jwt
    - https://github.com/golang-jwt/jwt/commit/0951d184286dece21f73c85673fd308786ffe9c3
    - https://github.com/golang-jwt/jwt/commit/bf316c48137a1212f8d0af9288cc9ce8e59f1afb
    - https://github.com/golang-jwt/jwt/security/advisories/GHSA-mh63-6h87-95cp
    - https://linux.oracle.com/cve/CVE-2025-30204.html
    - https://linux.oracle.com/errata/ELSA-2025-7967.html
    - https://nvd.nist.gov/vuln/detail/CVE-2025-30204
    - https://security.netapp.com/advisory/ntap-20250404-0002
    - https://security.netapp.com/advisory/ntap-20250404-0002/
    - https://www.cve.org/CVERecord?id=CVE-2025-30204
    PublishedDate: '2025-03-21T22:15:26.42Z'
    LastModifiedDate: '2025-04-10T13:15:52.097Z'
  - VulnerabilityID: CVE-2024-6104
    PkgID: github.com/hashicorp/go-retryablehttp@v0.7.4
    PkgName: github.com/hashicorp/go-retryablehttp
    PkgIdentifier:
      PURL: pkg:golang/github.com/hashicorp/go-retryablehttp@v0.7.4
      UID: 79c3c1935c21bd6
    InstalledVersion: v0.7.4
    FixedVersion: 0.7.7
    Status: fixed
    Layer:
      Digest: sha256:6d7e5136292d18c2ebd9139778b1b680694970552bf295006f0f049d6d4213a3
      DiffID: sha256:4c6c66d7094f65750c83c5f0eb81b35370ec963fbf2800ffe0b6078c8bba8099
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2024-6104
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'go-retryablehttp: url might write sensitive information to log file'
    Description: go-retryablehttp prior to 0.7.7 did not sanitize urls when writing them to its log file. This could lead to go-retryablehttp writing sensitive HTTP basic auth credentials to its log file. This vulnerability, CVE-2024-6104, was fixed in go-retryablehttp 0.7.7.
    Severity: MEDIUM
    CweIDs:
    - CWE-532
    VendorSeverity:
      alma: 2
      amazon: 3
      azure: 2
      cbl-mariner: 2
      ghsa: 2
      nvd: 2
      oracle-oval: 2
      redhat: 2
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:C/C:H/I:N/A:N
        V3Score: 6
      nvd:
        V3Vector: CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N
        V3Score: 5.5
      redhat:
        V3Vector: CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:C/C:H/I:N/A:N
        V3Score: 6
    References:
    - https://access.redhat.com/errata/RHSA-2024:9115
    - https://access.redhat.com/security/cve/CVE-2024-6104
    - https://bugzilla.redhat.com/2279814
    - https://bugzilla.redhat.com/2292668
    - https://bugzilla.redhat.com/2292787
    - https://bugzilla.redhat.com/2294000
    - https://bugzilla.redhat.com/2295310
    - https://discuss.hashicorp.com/c/security
    - https://discuss.hashicorp.com/t/hcsec-2024-12-go-retryablehttp-can-leak-basic-auth-credentials-to-log-files/68027
    - https://errata.almalinux.org/9/ALSA-2024-9115.html
    - https://github.com/advisories/GHSA-v6v8-xj6m-xwqh
    - https://github.com/hashicorp/go-retryablehttp
    - https://github.com/hashicorp/go-retryablehttp/commit/a99f07beb3c5faaa0a283617e6eb6bcf25f5049a
    - https://linux.oracle.com/cve/CVE-2024-6104.html
    - https://linux.oracle.com/errata/ELSA-2024-9115.html
    - https://nvd.nist.gov/vuln/detail/CVE-2024-6104
    - https://www.cve.org/CVERecord?id=CVE-2024-6104
    PublishedDate: '2024-06-24T17:15:11.087Z'
    LastModifiedDate: '2024-11-21T09:48:58.263Z'
  - VulnerabilityID: CVE-2024-45337
    PkgID: golang.org/x/crypto@v0.24.0
    PkgName: golang.org/x/crypto
    PkgIdentifier:
      PURL: pkg:golang/golang.org/x/crypto@v0.24.0
      UID: 5041d33a8847de35
    InstalledVersion: v0.24.0
    FixedVersion: 0.31.0
    Status: fixed
    Layer:
      Digest: sha256:6d7e5136292d18c2ebd9139778b1b680694970552bf295006f0f049d6d4213a3
      DiffID: sha256:4c6c66d7094f65750c83c5f0eb81b35370ec963fbf2800ffe0b6078c8bba8099
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2024-45337
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'golang.org/x/crypto/ssh: Misuse of ServerConfig.PublicKeyCallback may cause authorization bypass in golang.org/x/crypto'
    Description: Applications and libraries which misuse connection.serverAuthenticate (via callback field ServerConfig.PublicKeyCallback) may be susceptible to an authorization bypass. The documentation for ServerConfig.PublicKeyCallback says that "A call to this function does not guarantee that the key offered is in fact used to authenticate." Specifically, the SSH protocol allows clients to inquire about whether a public key is acceptable before proving control of the corresponding private key. PublicKeyCallback may be called with multiple keys, and the order in which the keys were provided cannot be used to infer which key the client successfully authenticated with, if any. Some applications, which store the key(s) passed to PublicKeyCallback (or derived information) and make security relevant determinations based on it once the connection is established, may make incorrect assumptions. For example, an attacker may send public keys A and B, and then authenticate with A. PublicKeyCallback would be called only twice, first with A and then with B. A vulnerable application may then make authorization decisions based on key B for which the attacker does not actually control the private key. Since this API is widely misused, as a partial mitigation golang.org/x/cry...@v0.31.0 enforces the property that, when successfully authenticating via public key, the last key passed to ServerConfig.PublicKeyCallback will be the key used to authenticate the connection. PublicKeyCallback will now be called multiple times with the same key, if necessary. Note that the client may still not control the last key passed to PublicKeyCallback if the connection is then authenticated with a different method, such as PasswordCallback, KeyboardInteractiveCallback, or NoClientAuth. Users should be using the Extensions field of the Permissions return value from the various authentication callbacks to record data associated with the authentication attempt instead of referencing external state. Once the connection is established the state corresponding to the successful authentication attempt can be retrieved via the ServerConn.Permissions field. Note that some third-party libraries misuse the Permissions type by sharing it across authentication attempts; users of third-party libraries should refer to the relevant projects for guidance.
    Severity: CRITICAL
    VendorSeverity:
      amazon: 3
      azure: 4
      cbl-mariner: 4
      ghsa: 4
      redhat: 3
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N
        V3Score: 9.1
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:H/A:N
        V3Score: 8.2
    References:
    - http://www.openwall.com/lists/oss-security/2024/12/11/2
    - https://access.redhat.com/security/cve/CVE-2024-45337
    - https://github.com/golang/crypto
    - https://github.com/golang/crypto/commit/b4f1988a35dee11ec3e05d6bf3e90b695fbd8909
    - https://go.dev/cl/635315
    - https://go.dev/issue/70779
    - https://groups.google.com/g/golang-announce/c/-nPEi39gI4Q/m/cGVPJCqdAQAJ
    - https://nvd.nist.gov/vuln/detail/CVE-2024-45337
    - https://pkg.go.dev/vuln/GO-2024-3321
    - https://security.netapp.com/advisory/ntap-20250131-0007
    - https://security.netapp.com/advisory/ntap-20250131-0007/
    - https://www.cve.org/CVERecord?id=CVE-2024-45337
    PublishedDate: '2024-12-12T02:02:07.97Z'
    LastModifiedDate: '2025-02-18T21:15:22.187Z'
  - VulnerabilityID: CVE-2025-22869
    PkgID: golang.org/x/crypto@v0.24.0
    PkgName: golang.org/x/crypto
    PkgIdentifier:
      PURL: pkg:golang/golang.org/x/crypto@v0.24.0
      UID: 5041d33a8847de35
    InstalledVersion: v0.24.0
    FixedVersion: 0.35.0
    Status: fixed
    Layer:
      Digest: sha256:6d7e5136292d18c2ebd9139778b1b680694970552bf295006f0f049d6d4213a3
      DiffID: sha256:4c6c66d7094f65750c83c5f0eb81b35370ec963fbf2800ffe0b6078c8bba8099
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-22869
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'golang.org/x/crypto/ssh: Denial of Service in the Key Exchange of golang.org/x/crypto/ssh'
    Description: SSH servers which implement file transfer protocols are vulnerable to a denial of service attack from clients which complete the key exchange slowly, or not at all, causing pending content to be read into memory, but never transmitted.
    Severity: HIGH
    CweIDs:
    - CWE-770
    VendorSeverity:
      alma: 3
      amazon: 3
      azure: 3
      cbl-mariner: 3
      ghsa: 3
      oracle-oval: 3
      redhat: 3
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H
        V3Score: 7.5
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H
        V3Score: 7.5
    References:
    - https://access.redhat.com/errata/RHSA-2025:3833
    - https://access.redhat.com/security/cve/CVE-2025-22869
    - https://bugzilla.redhat.com/2348367
    - https://errata.almalinux.org/9/ALSA-2025-3833.html
    - https://github.com/golang/crypto
    - https://github.com/golang/crypto/commit/7292932d45d55c7199324ab0027cc86e8198aa22
    - https://go-review.googlesource.com/c/crypto/+/652135
    - https://go.dev/cl/652135
    - https://go.dev/issue/71931
    - https://linux.oracle.com/cve/CVE-2025-22869.html
    - https://linux.oracle.com/errata/ELSA-2025-7416.html
    - https://nvd.nist.gov/vuln/detail/CVE-2025-22869
    - https://pkg.go.dev/vuln/GO-2025-3487
    - https://security.netapp.com/advisory/ntap-20250411-0010
    - https://security.netapp.com/advisory/ntap-20250411-0010/
    - https://www.cve.org/CVERecord?id=CVE-2025-22869
    PublishedDate: '2025-02-26T08:14:24.997Z'
    LastModifiedDate: '2025-05-01T19:28:20.74Z'
  - VulnerabilityID: CVE-2025-22870
    PkgID: golang.org/x/net@v0.26.0
    PkgName: golang.org/x/net
    PkgIdentifier:
      PURL: pkg:golang/golang.org/x/net@v0.26.0
      UID: 8c04148890da6da2
    InstalledVersion: v0.26.0
    FixedVersion: 0.36.0
    Status: fixed
    Layer:
      Digest: sha256:6d7e5136292d18c2ebd9139778b1b680694970552bf295006f0f049d6d4213a3
      DiffID: sha256:4c6c66d7094f65750c83c5f0eb81b35370ec963fbf2800ffe0b6078c8bba8099
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-22870
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'golang.org/x/net/proxy: golang.org/x/net/http/httpproxy: HTTP Proxy bypass using IPv6 Zone IDs in golang.org/x/net'
    Description: Matching of hosts against proxy patterns can improperly treat an IPv6 zone ID as a hostname component. For example, when the NO_PROXY environment variable is set to "*.example.com", a request to "[::1%25.example.com]:80` will incorrectly match and not be proxied.
    Severity: MEDIUM
    CweIDs:
    - CWE-115
    VendorSeverity:
      amazon: 2
      azure: 2
      cbl-mariner: 2
      ghsa: 2
      redhat: 2
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:L
        V3Score: 4.4
      redhat:
        V3Vector: CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:L
        V3Score: 4.4
    References:
    - http://www.openwall.com/lists/oss-security/2025/03/07/2
    - https://access.redhat.com/security/cve/CVE-2025-22870
    - https://go-review.googlesource.com/q/project:net
    - https://go.dev/cl/654697
    - https://go.dev/issue/71984
    - https://nvd.nist.gov/vuln/detail/CVE-2025-22870
    - https://pkg.go.dev/vuln/GO-2025-3503
    - https://security.netapp.com/advisory/ntap-20250509-0007
    - https://security.netapp.com/advisory/ntap-20250509-0007/
    - https://www.cve.org/CVERecord?id=CVE-2025-22870
    PublishedDate: '2025-03-12T19:15:38.31Z'
    LastModifiedDate: '2025-05-09T20:15:38.727Z'
  - VulnerabilityID: CVE-2025-22872
    PkgID: golang.org/x/net@v0.26.0
    PkgName: golang.org/x/net
    PkgIdentifier:
      PURL: pkg:golang/golang.org/x/net@v0.26.0
      UID: 8c04148890da6da2
    InstalledVersion: v0.26.0
    FixedVersion: 0.38.0
    Status: fixed
    Layer:
      Digest: sha256:6d7e5136292d18c2ebd9139778b1b680694970552bf295006f0f049d6d4213a3
      DiffID: sha256:4c6c66d7094f65750c83c5f0eb81b35370ec963fbf2800ffe0b6078c8bba8099
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-22872
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'golang.org/x/net/html: Incorrect Neutralization of Input During Web Page Generation in x/net in golang.org/x/net'
    Description: The tokenizer incorrectly interprets tags with unquoted attribute values that end with a solidus character (/) as self-closing. When directly using Tokenizer, this can result in such tags incorrectly being marked as self-closing, and when using the Parse functions, this can result in content following such tags as being placed in the wrong scope during DOM construction, but only when tags are in foreign content (e.g. <math>, <svg>, etc contexts).
    Severity: MEDIUM
    VendorSeverity:
      amazon: 3
      azure: 2
      cbl-mariner: 2
      ghsa: 2
      redhat: 2
    CVSS:
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:L/I:L/A:L
        V3Score: 6.5
    References:
    - https://access.redhat.com/security/cve/CVE-2025-22872
    - https://github.com/advisories/GHSA-vvgc-356p-c3xw
    - https://go.dev/cl/662715
    - https://go.dev/issue/73070
    - https://groups.google.com/g/golang-announce/c/ezSKR9vqbqA
    - https://nvd.nist.gov/vuln/detail/CVE-2025-22872
    - https://pkg.go.dev/vuln/GO-2025-3595
    - https://security.netapp.com/advisory/ntap-20250516-0007
    - https://security.netapp.com/advisory/ntap-20250516-0007/
    - https://www.cve.org/CVERecord?id=CVE-2025-22872
    PublishedDate: '2025-04-16T18:16:04.183Z'
    LastModifiedDate: '2025-05-16T23:15:19.707Z'
  - VulnerabilityID: GHSA-xr7q-jx4m-x55m
    PkgID: google.golang.org/grpc@v1.64.0
    PkgName: google.golang.org/grpc
    PkgIdentifier:
      PURL: pkg:golang/google.golang.org/grpc@v1.64.0
      UID: b5e6dd3f671415d3
    InstalledVersion: v1.64.0
    FixedVersion: 1.64.1
    Status: fixed
    Layer:
      Digest: sha256:6d7e5136292d18c2ebd9139778b1b680694970552bf295006f0f049d6d4213a3
      DiffID: sha256:4c6c66d7094f65750c83c5f0eb81b35370ec963fbf2800ffe0b6078c8bba8099
    SeveritySource: ghsa
    PrimaryURL: https://github.com/advisories/GHSA-xr7q-jx4m-x55m
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: Private tokens could appear in logs if context containing gRPC metadata is logged in github.com/grpc/grpc-go
    Description: |
      ### Impact
      This issue represents a potential PII concern.  If applications were printing or logging a context containing gRPC metadata, the affected versions will contain all the metadata, which may include private information.

      ### Patches
      The issue first appeared in 1.64.0 and is patched in 1.64.1 and 1.65.0

      ### Workarounds
      If using an affected version and upgrading is not possible, ensuring you do not log or print contexts will avoid the problem.
    Severity: LOW
    VendorSeverity:
      ghsa: 1
    References:
    - https://github.com/grpc/grpc-go
    - https://github.com/grpc/grpc-go/commit/ab292411ddc0f3b7a7786754d1fe05264c3021eb
    - https://github.com/grpc/grpc-go/security/advisories/GHSA-xr7q-jx4m-x55m
    PublishedDate: '2024-07-05T20:07:01Z'
    LastModifiedDate: '2024-07-09T21:38:29Z'
- Target: usr/bin/promtool
  Class: lang-pkgs
  Type: gobinary
  Vulnerabilities:
  - VulnerabilityID: CVE-2024-35255
    PkgID: github.com/Azure/azure-sdk-for-go/sdk/azidentity@v1.5.2
    PkgName: github.com/Azure/azure-sdk-for-go/sdk/azidentity
    PkgIdentifier:
      PURL: pkg:golang/github.com/azure/azure-sdk-for-go/sdk/azidentity@v1.5.2
      UID: 5d9a061b58d6e8c0
    InstalledVersion: v1.5.2
    FixedVersion: 1.6.0
    Status: fixed
    Layer:
      Digest: sha256:6d7e5136292d18c2ebd9139778b1b680694970552bf295006f0f049d6d4213a3
      DiffID: sha256:4c6c66d7094f65750c83c5f0eb81b35370ec963fbf2800ffe0b6078c8bba8099
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2024-35255
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'azure-identity: Azure Identity Libraries Elevation of Privilege Vulnerability in github.com/Azure/azure-sdk-for-go/sdk/azidentity'
    Description: Azure Identity Libraries and Microsoft Authentication Library Elevation of Privilege Vulnerability
    Severity: MEDIUM
    CweIDs:
    - CWE-362
    VendorSeverity:
      amazon: 3
      azure: 2
      cbl-mariner: 2
      ghsa: 2
      redhat: 2
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N
        V3Score: 5.5
      redhat:
        V3Vector: CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N
        V3Score: 5.5
    References:
    - https://access.redhat.com/security/cve/CVE-2024-35255
    - https://github.com/Azure/azure-sdk-for-go/commit/50774cd9709905523136fb05e8c85a50e8984499
    - https://github.com/Azure/azure-sdk-for-java/commit/5bf020d6ea056de40e2738e3647a4e06f902c18d
    - https://github.com/Azure/azure-sdk-for-js/commit/c6aa75d312ae463e744163cedfd8fc480cc8d492
    - https://github.com/Azure/azure-sdk-for-net/commit/9279a4f38bf69b457cfb9b354f210e0a540a5c53
    - https://github.com/Azure/azure-sdk-for-python/commit/cb065acd7d0f957327dc4f02d1646d4e51a94178
    - https://github.com/AzureAD/microsoft-authentication-library-for-dotnet/issues/4806#issuecomment-2178960340
    - https://github.com/advisories/GHSA-m5vv-6r4h-3vj9
    - https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-35255
    - https://nvd.nist.gov/vuln/detail/CVE-2024-35255
    - https://www.cve.org/CVERecord?id=CVE-2024-35255
    PublishedDate: '2024-06-11T17:16:03.55Z'
    LastModifiedDate: '2024-11-21T09:20:01.923Z'
  - VulnerabilityID: CVE-2024-41110
    PkgID: github.com/docker/docker@v26.1.3+incompatible
    PkgName: github.com/docker/docker
    PkgIdentifier:
      PURL: pkg:golang/github.com/docker/docker@v26.1.3%2Bincompatible
      UID: e66cf037ad7083b6
    InstalledVersion: v26.1.3+incompatible
    FixedVersion: 23.0.15, 26.1.5, 27.1.1, 25.0.6
    Status: fixed
    Layer:
      Digest: sha256:6d7e5136292d18c2ebd9139778b1b680694970552bf295006f0f049d6d4213a3
      DiffID: sha256:4c6c66d7094f65750c83c5f0eb81b35370ec963fbf2800ffe0b6078c8bba8099
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2024-41110
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'moby: Authz zero length regression'
    Description: |-
      Moby is an open-source project created by Docker for software containerization. A security vulnerability has been detected in certain versions of Docker Engine, which could allow an attacker to bypass authorization plugins (AuthZ) under specific circumstances. The base likelihood of this being exploited is low.

      Using a specially-crafted API request, an Engine API client could make the daemon forward the request or response to an authorization plugin without the body. In certain circumstances, the authorization plugin may allow a request which it would have otherwise denied if the body had been forwarded to it.

      A security issue was discovered In 2018, where an attacker could bypass AuthZ plugins using a specially crafted API request. This could lead to unauthorized actions, including privilege escalation. Although this issue was fixed in Docker Engine v18.09.1 in January 2019, the fix was not carried forward to later major versions, resulting in a regression. Anyone who depends on authorization plugins that introspect the request and/or response body to make access control decisions is potentially impacted.

      Docker EE v19.03.x and all versions of Mirantis Container Runtime are not vulnerable.

      docker-ce v27.1.1 containes patches to fix the vulnerability. Patches have also been merged into the master, 19.03, 20.0, 23.0, 24.0, 25.0, 26.0, and 26.1 release branches. If one is unable to upgrade immediately, avoid using AuthZ plugins and/or restrict access to the Docker API to trusted parties, following the principle of least privilege.
    Severity: CRITICAL
    CweIDs:
    - CWE-187
    - CWE-444
    - CWE-863
    VendorSeverity:
      amazon: 3
      azure: 4
      cbl-mariner: 4
      ghsa: 4
      redhat: 4
      ubuntu: 3
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H
        V3Score: 10
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H
        V3Score: 9.9
    References:
    - https://access.redhat.com/security/cve/CVE-2024-41110
    - https://github.com/moby/moby
    - https://github.com/moby/moby/commit/411e817ddf710ff8e08fa193da80cb78af708191
    - https://github.com/moby/moby/commit/42f40b1d6dd7562342f832b9cd2adf9e668eeb76
    - https://github.com/moby/moby/commit/65cc597cea28cdc25bea3b8a86384b4251872919
    - https://github.com/moby/moby/commit/852759a7df454cbf88db4e954c919becd48faa9b
    - https://github.com/moby/moby/commit/a31260625655cff9ae226b51757915e275e304b0
    - https://github.com/moby/moby/commit/a79fabbfe84117696a19671f4aa88b82d0f64fc1
    - https://github.com/moby/moby/commit/ae160b4edddb72ef4bd71f66b975a1a1cc434f00
    - https://github.com/moby/moby/commit/ae2b3666c517c96cbc2adf1af5591a6b00d4ec0f
    - https://github.com/moby/moby/commit/cc13f952511154a2866bddbb7dddebfe9e83b801
    - https://github.com/moby/moby/commit/fc274cd2ff4cf3b48c91697fb327dd1fb95588fb
    - https://github.com/moby/moby/security/advisories/GHSA-v23v-6jw2-98fq
    - https://lists.debian.org/debian-lts-announce/2024/10/msg00009.html
    - https://nvd.nist.gov/vuln/detail/CVE-2024-41110
    - https://security.netapp.com/advisory/ntap-20240802-0001/
    - https://ubuntu.com/security/notices/USN-7161-1
    - https://ubuntu.com/security/notices/USN-7161-2
    - https://ubuntu.com/security/notices/USN-7161-3
    - https://www.cve.org/CVERecord?id=CVE-2024-41110
    - https://www.docker.com/blog/docker-security-advisory-docker-engine-authz-plugin
    - https://www.docker.com/blog/docker-security-advisory-docker-engine-authz-plugin/
    PublishedDate: '2024-07-24T17:15:11.053Z'
    LastModifiedDate: '2024-11-21T09:32:15.16Z'
  - VulnerabilityID: CVE-2025-30204
    PkgID: github.com/golang-jwt/jwt/v5@v5.2.1
    PkgName: github.com/golang-jwt/jwt/v5
    PkgIdentifier:
      PURL: pkg:golang/github.com/golang-jwt/jwt/v5@v5.2.1
      UID: a1e77af76632a7e
    InstalledVersion: v5.2.1
    FixedVersion: 5.2.2
    Status: fixed
    Layer:
      Digest: sha256:6d7e5136292d18c2ebd9139778b1b680694970552bf295006f0f049d6d4213a3
      DiffID: sha256:4c6c66d7094f65750c83c5f0eb81b35370ec963fbf2800ffe0b6078c8bba8099
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-30204
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'golang-jwt/jwt: jwt-go allows excessive memory allocation during header parsing'
    Description: golang-jwt is a Go implementation of JSON Web Tokens. Starting in version 3.2.0 and prior to versions 5.2.2 and 4.5.2, the function parse.ParseUnverified splits (via a call to strings.Split) its argument (which is untrusted data) on periods. As a result, in the face of a malicious request whose Authorization header consists of Bearer  followed by many period characters, a call to that function incurs allocations to the tune of O(n) bytes (where n stands for the length of the function's argument), with a constant factor of about 16. This issue is fixed in 5.2.2 and 4.5.2.
    Severity: HIGH
    CweIDs:
    - CWE-405
    VendorSeverity:
      alma: 3
      amazon: 3
      azure: 3
      cbl-mariner: 3
      ghsa: 3
      oracle-oval: 3
      redhat: 3
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H
        V3Score: 7.5
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H
        V3Score: 7.5
    References:
    - https://access.redhat.com/errata/RHSA-2025:7425
    - https://access.redhat.com/security/cve/CVE-2025-30204
    - https://bugzilla.redhat.com/2354195
    - https://errata.almalinux.org/9/ALSA-2025-7425.html
    - https://github.com/golang-jwt/jwt
    - https://github.com/golang-jwt/jwt/commit/0951d184286dece21f73c85673fd308786ffe9c3
    - https://github.com/golang-jwt/jwt/commit/bf316c48137a1212f8d0af9288cc9ce8e59f1afb
    - https://github.com/golang-jwt/jwt/security/advisories/GHSA-mh63-6h87-95cp
    - https://linux.oracle.com/cve/CVE-2025-30204.html
    - https://linux.oracle.com/errata/ELSA-2025-7967.html
    - https://nvd.nist.gov/vuln/detail/CVE-2025-30204
    - https://security.netapp.com/advisory/ntap-20250404-0002
    - https://security.netapp.com/advisory/ntap-20250404-0002/
    - https://www.cve.org/CVERecord?id=CVE-2025-30204
    PublishedDate: '2025-03-21T22:15:26.42Z'
    LastModifiedDate: '2025-04-10T13:15:52.097Z'
  - VulnerabilityID: CVE-2024-6104
    PkgID: github.com/hashicorp/go-retryablehttp@v0.7.4
    PkgName: github.com/hashicorp/go-retryablehttp
    PkgIdentifier:
      PURL: pkg:golang/github.com/hashicorp/go-retryablehttp@v0.7.4
      UID: 85fbf89b64863e5a
    InstalledVersion: v0.7.4
    FixedVersion: 0.7.7
    Status: fixed
    Layer:
      Digest: sha256:6d7e5136292d18c2ebd9139778b1b680694970552bf295006f0f049d6d4213a3
      DiffID: sha256:4c6c66d7094f65750c83c5f0eb81b35370ec963fbf2800ffe0b6078c8bba8099
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2024-6104
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'go-retryablehttp: url might write sensitive information to log file'
    Description: go-retryablehttp prior to 0.7.7 did not sanitize urls when writing them to its log file. This could lead to go-retryablehttp writing sensitive HTTP basic auth credentials to its log file. This vulnerability, CVE-2024-6104, was fixed in go-retryablehttp 0.7.7.
    Severity: MEDIUM
    CweIDs:
    - CWE-532
    VendorSeverity:
      alma: 2
      amazon: 3
      azure: 2
      cbl-mariner: 2
      ghsa: 2
      nvd: 2
      oracle-oval: 2
      redhat: 2
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:C/C:H/I:N/A:N
        V3Score: 6
      nvd:
        V3Vector: CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N
        V3Score: 5.5
      redhat:
        V3Vector: CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:C/C:H/I:N/A:N
        V3Score: 6
    References:
    - https://access.redhat.com/errata/RHSA-2024:9115
    - https://access.redhat.com/security/cve/CVE-2024-6104
    - https://bugzilla.redhat.com/2279814
    - https://bugzilla.redhat.com/2292668
    - https://bugzilla.redhat.com/2292787
    - https://bugzilla.redhat.com/2294000
    - https://bugzilla.redhat.com/2295310
    - https://discuss.hashicorp.com/c/security
    - https://discuss.hashicorp.com/t/hcsec-2024-12-go-retryablehttp-can-leak-basic-auth-credentials-to-log-files/68027
    - https://errata.almalinux.org/9/ALSA-2024-9115.html
    - https://github.com/advisories/GHSA-v6v8-xj6m-xwqh
    - https://github.com/hashicorp/go-retryablehttp
    - https://github.com/hashicorp/go-retryablehttp/commit/a99f07beb3c5faaa0a283617e6eb6bcf25f5049a
    - https://linux.oracle.com/cve/CVE-2024-6104.html
    - https://linux.oracle.com/errata/ELSA-2024-9115.html
    - https://nvd.nist.gov/vuln/detail/CVE-2024-6104
    - https://www.cve.org/CVERecord?id=CVE-2024-6104
    PublishedDate: '2024-06-24T17:15:11.087Z'
    LastModifiedDate: '2024-11-21T09:48:58.263Z'
  - VulnerabilityID: CVE-2024-45337
    PkgID: golang.org/x/crypto@v0.24.0
    PkgName: golang.org/x/crypto
    PkgIdentifier:
      PURL: pkg:golang/golang.org/x/crypto@v0.24.0
      UID: b5e00da11cee68d9
    InstalledVersion: v0.24.0
    FixedVersion: 0.31.0
    Status: fixed
    Layer:
      Digest: sha256:6d7e5136292d18c2ebd9139778b1b680694970552bf295006f0f049d6d4213a3
      DiffID: sha256:4c6c66d7094f65750c83c5f0eb81b35370ec963fbf2800ffe0b6078c8bba8099
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2024-45337
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'golang.org/x/crypto/ssh: Misuse of ServerConfig.PublicKeyCallback may cause authorization bypass in golang.org/x/crypto'
    Description: Applications and libraries which misuse connection.serverAuthenticate (via callback field ServerConfig.PublicKeyCallback) may be susceptible to an authorization bypass. The documentation for ServerConfig.PublicKeyCallback says that "A call to this function does not guarantee that the key offered is in fact used to authenticate." Specifically, the SSH protocol allows clients to inquire about whether a public key is acceptable before proving control of the corresponding private key. PublicKeyCallback may be called with multiple keys, and the order in which the keys were provided cannot be used to infer which key the client successfully authenticated with, if any. Some applications, which store the key(s) passed to PublicKeyCallback (or derived information) and make security relevant determinations based on it once the connection is established, may make incorrect assumptions. For example, an attacker may send public keys A and B, and then authenticate with A. PublicKeyCallback would be called only twice, first with A and then with B. A vulnerable application may then make authorization decisions based on key B for which the attacker does not actually control the private key. Since this API is widely misused, as a partial mitigation golang.org/x/cry...@v0.31.0 enforces the property that, when successfully authenticating via public key, the last key passed to ServerConfig.PublicKeyCallback will be the key used to authenticate the connection. PublicKeyCallback will now be called multiple times with the same key, if necessary. Note that the client may still not control the last key passed to PublicKeyCallback if the connection is then authenticated with a different method, such as PasswordCallback, KeyboardInteractiveCallback, or NoClientAuth. Users should be using the Extensions field of the Permissions return value from the various authentication callbacks to record data associated with the authentication attempt instead of referencing external state. Once the connection is established the state corresponding to the successful authentication attempt can be retrieved via the ServerConn.Permissions field. Note that some third-party libraries misuse the Permissions type by sharing it across authentication attempts; users of third-party libraries should refer to the relevant projects for guidance.
    Severity: CRITICAL
    VendorSeverity:
      amazon: 3
      azure: 4
      cbl-mariner: 4
      ghsa: 4
      redhat: 3
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N
        V3Score: 9.1
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:H/A:N
        V3Score: 8.2
    References:
    - http://www.openwall.com/lists/oss-security/2024/12/11/2
    - https://access.redhat.com/security/cve/CVE-2024-45337
    - https://github.com/golang/crypto
    - https://github.com/golang/crypto/commit/b4f1988a35dee11ec3e05d6bf3e90b695fbd8909
    - https://go.dev/cl/635315
    - https://go.dev/issue/70779
    - https://groups.google.com/g/golang-announce/c/-nPEi39gI4Q/m/cGVPJCqdAQAJ
    - https://nvd.nist.gov/vuln/detail/CVE-2024-45337
    - https://pkg.go.dev/vuln/GO-2024-3321
    - https://security.netapp.com/advisory/ntap-20250131-0007
    - https://security.netapp.com/advisory/ntap-20250131-0007/
    - https://www.cve.org/CVERecord?id=CVE-2024-45337
    PublishedDate: '2024-12-12T02:02:07.97Z'
    LastModifiedDate: '2025-02-18T21:15:22.187Z'
  - VulnerabilityID: CVE-2025-22869
    PkgID: golang.org/x/crypto@v0.24.0
    PkgName: golang.org/x/crypto
    PkgIdentifier:
      PURL: pkg:golang/golang.org/x/crypto@v0.24.0
      UID: b5e00da11cee68d9
    InstalledVersion: v0.24.0
    FixedVersion: 0.35.0
    Status: fixed
    Layer:
      Digest: sha256:6d7e5136292d18c2ebd9139778b1b680694970552bf295006f0f049d6d4213a3
      DiffID: sha256:4c6c66d7094f65750c83c5f0eb81b35370ec963fbf2800ffe0b6078c8bba8099
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-22869
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'golang.org/x/crypto/ssh: Denial of Service in the Key Exchange of golang.org/x/crypto/ssh'
    Description: SSH servers which implement file transfer protocols are vulnerable to a denial of service attack from clients which complete the key exchange slowly, or not at all, causing pending content to be read into memory, but never transmitted.
    Severity: HIGH
    CweIDs:
    - CWE-770
    VendorSeverity:
      alma: 3
      amazon: 3
      azure: 3
      cbl-mariner: 3
      ghsa: 3
      oracle-oval: 3
      redhat: 3
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H
        V3Score: 7.5
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H
        V3Score: 7.5
    References:
    - https://access.redhat.com/errata/RHSA-2025:3833
    - https://access.redhat.com/security/cve/CVE-2025-22869
    - https://bugzilla.redhat.com/2348367
    - https://errata.almalinux.org/9/ALSA-2025-3833.html
    - https://github.com/golang/crypto
    - https://github.com/golang/crypto/commit/7292932d45d55c7199324ab0027cc86e8198aa22
    - https://go-review.googlesource.com/c/crypto/+/652135
    - https://go.dev/cl/652135
    - https://go.dev/issue/71931
    - https://linux.oracle.com/cve/CVE-2025-22869.html
    - https://linux.oracle.com/errata/ELSA-2025-7416.html
    - https://nvd.nist.gov/vuln/detail/CVE-2025-22869
    - https://pkg.go.dev/vuln/GO-2025-3487
    - https://security.netapp.com/advisory/ntap-20250411-0010
    - https://security.netapp.com/advisory/ntap-20250411-0010/
    - https://www.cve.org/CVERecord?id=CVE-2025-22869
    PublishedDate: '2025-02-26T08:14:24.997Z'
    LastModifiedDate: '2025-05-01T19:28:20.74Z'
  - VulnerabilityID: CVE-2025-22870
    PkgID: golang.org/x/net@v0.26.0
    PkgName: golang.org/x/net
    PkgIdentifier:
      PURL: pkg:golang/golang.org/x/net@v0.26.0
      UID: 4075f6667d6d269e
    InstalledVersion: v0.26.0
    FixedVersion: 0.36.0
    Status: fixed
    Layer:
      Digest: sha256:6d7e5136292d18c2ebd9139778b1b680694970552bf295006f0f049d6d4213a3
      DiffID: sha256:4c6c66d7094f65750c83c5f0eb81b35370ec963fbf2800ffe0b6078c8bba8099
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-22870
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'golang.org/x/net/proxy: golang.org/x/net/http/httpproxy: HTTP Proxy bypass using IPv6 Zone IDs in golang.org/x/net'
    Description: Matching of hosts against proxy patterns can improperly treat an IPv6 zone ID as a hostname component. For example, when the NO_PROXY environment variable is set to "*.example.com", a request to "[::1%25.example.com]:80` will incorrectly match and not be proxied.
    Severity: MEDIUM
    CweIDs:
    - CWE-115
    VendorSeverity:
      amazon: 2
      azure: 2
      cbl-mariner: 2
      ghsa: 2
      redhat: 2
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:L
        V3Score: 4.4
      redhat:
        V3Vector: CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:L
        V3Score: 4.4
    References:
    - http://www.openwall.com/lists/oss-security/2025/03/07/2
    - https://access.redhat.com/security/cve/CVE-2025-22870
    - https://go-review.googlesource.com/q/project:net
    - https://go.dev/cl/654697
    - https://go.dev/issue/71984
    - https://nvd.nist.gov/vuln/detail/CVE-2025-22870
    - https://pkg.go.dev/vuln/GO-2025-3503
    - https://security.netapp.com/advisory/ntap-20250509-0007
    - https://security.netapp.com/advisory/ntap-20250509-0007/
    - https://www.cve.org/CVERecord?id=CVE-2025-22870
    PublishedDate: '2025-03-12T19:15:38.31Z'
    LastModifiedDate: '2025-05-09T20:15:38.727Z'
  - VulnerabilityID: CVE-2025-22872
    PkgID: golang.org/x/net@v0.26.0
    PkgName: golang.org/x/net
    PkgIdentifier:
      PURL: pkg:golang/golang.org/x/net@v0.26.0
      UID: 4075f6667d6d269e
    InstalledVersion: v0.26.0
    FixedVersion: 0.38.0
    Status: fixed
    Layer:
      Digest: sha256:6d7e5136292d18c2ebd9139778b1b680694970552bf295006f0f049d6d4213a3
      DiffID: sha256:4c6c66d7094f65750c83c5f0eb81b35370ec963fbf2800ffe0b6078c8bba8099
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-22872
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'golang.org/x/net/html: Incorrect Neutralization of Input During Web Page Generation in x/net in golang.org/x/net'
    Description: The tokenizer incorrectly interprets tags with unquoted attribute values that end with a solidus character (/) as self-closing. When directly using Tokenizer, this can result in such tags incorrectly being marked as self-closing, and when using the Parse functions, this can result in content following such tags as being placed in the wrong scope during DOM construction, but only when tags are in foreign content (e.g. <math>, <svg>, etc contexts).
    Severity: MEDIUM
    VendorSeverity:
      amazon: 3
      azure: 2
      cbl-mariner: 2
      ghsa: 2
      redhat: 2
    CVSS:
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:L/I:L/A:L
        V3Score: 6.5
    References:
    - https://access.redhat.com/security/cve/CVE-2025-22872
    - https://github.com/advisories/GHSA-vvgc-356p-c3xw
    - https://go.dev/cl/662715
    - https://go.dev/issue/73070
    - https://groups.google.com/g/golang-announce/c/ezSKR9vqbqA
    - https://nvd.nist.gov/vuln/detail/CVE-2025-22872
    - https://pkg.go.dev/vuln/GO-2025-3595
    - https://security.netapp.com/advisory/ntap-20250516-0007
    - https://security.netapp.com/advisory/ntap-20250516-0007/
    - https://www.cve.org/CVERecord?id=CVE-2025-22872
    PublishedDate: '2025-04-16T18:16:04.183Z'
    LastModifiedDate: '2025-05-16T23:15:19.707Z'
  - VulnerabilityID: GHSA-xr7q-jx4m-x55m
    PkgID: google.golang.org/grpc@v1.64.0
    PkgName: google.golang.org/grpc
    PkgIdentifier:
      PURL: pkg:golang/google.golang.org/grpc@v1.64.0
      UID: 6c7f57c93d4ea9eb
    InstalledVersion: v1.64.0
    FixedVersion: 1.64.1
    Status: fixed
    Layer:
      Digest: sha256:6d7e5136292d18c2ebd9139778b1b680694970552bf295006f0f049d6d4213a3
      DiffID: sha256:4c6c66d7094f65750c83c5f0eb81b35370ec963fbf2800ffe0b6078c8bba8099
    SeveritySource: ghsa
    PrimaryURL: https://github.com/advisories/GHSA-xr7q-jx4m-x55m
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: Private tokens could appear in logs if context containing gRPC metadata is logged in github.com/grpc/grpc-go
    Description: |
      ### Impact
      This issue represents a potential PII concern.  If applications were printing or logging a context containing gRPC metadata, the affected versions will contain all the metadata, which may include private information.

      ### Patches
      The issue first appeared in 1.64.0 and is patched in 1.64.1 and 1.65.0

      ### Workarounds
      If using an affected version and upgrading is not possible, ensuring you do not log or print contexts will avoid the problem.
    Severity: LOW
    VendorSeverity:
      ghsa: 1
    References:
    - https://github.com/grpc/grpc-go
    - https://github.com/grpc/grpc-go/commit/ab292411ddc0f3b7a7786754d1fe05264c3021eb
    - https://github.com/grpc/grpc-go/security/advisories/GHSA-xr7q-jx4m-x55m
    PublishedDate: '2024-07-05T20:07:01Z'
    LastModifiedDate: '2024-07-09T21:38:29Z'
